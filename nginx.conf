events {
  worker_connections 1024;
}

error_log stderr;

http {
  resolver 127.0.0.11 ipv6=off;

  lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/resty/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/lua/src/?.lua";
  lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/openresty/lualib/resty/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;";

  lua_shared_dict redis_cluster_slot_locks 100k;
  lua_shared_dict redis_cluster_slots_info 100k;

  init_by_lua_block {
    config = {
      name = "redis_cluster",
      serv_list = {
        { ip = "redis", port = 7000 },
      },
    }

    cluster = require "resty.rediscluster"
    strafe = require "resty.strafe"
  }

  server {
    listen 8080;

    location /rater {
      default_type 'text/plain';
      
      content_by_lua_block {
        local client = cluster:new(config)
        local rate, err = strafe.measure(client, ngx.var.arg_token)
        
        if err then
          ngx.log(ngx.ERR, "err: ", err)
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        if rate > 10 then
          ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
        else
          ngx.say(rate)
        end

      }
    }
  }
}